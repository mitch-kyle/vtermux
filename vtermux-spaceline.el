;;; vtermux-spaceline.el --- spaceline segment for vtermux -*- lexical-binding: t -*-

;; Author: Mitch Kyle <mitch.tux@gmail.com>
;; Maintainer: Mitch Kyle <mitch.tux@gmail.com>
;; Version: 0.1.0-alpha
;; Package-Requires: ((spaceline "2.0.1") (vtermux))
;; Homepage: https://github.com/mitch-kyle/vtermux
;; Keywords: vtermux spaceline

;; This file is not part of GNU Emacs

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; For a full copy of the GNU General Public License
;; see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; tmux powerline like mode line for for vtermux.

;;; Code:
(require 'vtermux)
(require 'spaceline)

;;;;;;;;;;;;
;; Custom ;;
;;;;;;;;;;;;

(defgroup vtermux-spaceline nil
  "vtermux spaceline segment"
  :group 'spaceline)

(defcustom vtermux-spaceline-max-title-length 30
  "The maximum number of characters allowed in the vtermux status line for a
buffer"
  :type 'integer
  :group 'vtermux-spaceline)

(defcustom vtermux-spaceline-title-overflow-suffix "..."
  "String to appended to title in the vtermux buffer indicator to show that it
has been truncated for being too long."
  :type 'integer
  :group 'vtermux-spaceline)


;;;;;;;;;;;;;;;
;; Variables ;;
;;;;;;;;;;;;;;;

(defvar vtermux-spaceline-n-buffer-indicators 9
  "Number of buffer indicators to have on the status line. this number should
be positive and odd.")

(defvar vtermux-spaceline-prune-title
  (format "%s@%s: "
          (getenv "USER")
          (s-trim (shell-command-to-string "hostname")))
  "prefix to remove from terminal title in vtermux buffer indicator.")


;;;;;;;;;;;;;;;;;;;;;;;;
;; Spaceline Segments ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; This function is only called in one place but if it's kept as a named
;; function it can be hacked to display what the user likes for the buffer
;; indicator
(defun vtermux-spaceline--indicator-text (index buffer)
  "Get the text for the indicator for a specific index and vtermux buffer."
  (when-let (name (with-current-buffer buffer
                    (when vtermux-title
                      (s-trim vtermux-title))))
    (let ((name (string-remove-prefix vtermux-spaceline-prune-title name)))
      (format "[%d] %s"
              index
              (if (<= (length name)
                      vtermux-spaceline-max-title-length)
                  name
                (concat
                 (substring name 0
                            (- vtermux-spaceline-max-title-length
                               (length
                                vtermux-spaceline-title-overflow-suffix)))
                 vtermux-spaceline-title-overflow-suffix))))))

(defun vtermux-spaceline-buffer-indicator (n
                                           base-priority
                                           priority-increment
                                           &rest props)
  "Generate a list of spaceline segments which will show the current
vtermux buffer along with it's surrounding buffers with descending priority.

when used with a window system, indicators are clickable and will switch to
the buffer they represent."
  (let ((result)
        (mid-point (/ n 2)))
    (dotimes (i n)
      (let ((sym (intern (format "vtermux-status-line%s" i)))
            (priority (- base-priority
                         (* (abs (- mid-point i))
                            priority-increment)))
            (position (- (- mid-point i))))
        (eval
         `(spaceline-define-segment ,sym
            "generated by `vtermux-spaceline'."
            (let* ((cur-index (or (cl-position (current-buffer)
                                               vtermux-buffer-list)
                                  0))
                   (my-index (+ cur-index ,position)))
              (when-let (buf (and (>= my-index 0)
                                  (nth my-index vtermux-buffer-list)))
                (propertize
                 (vtermux-spaceline--indicator-text my-index buf)
                 ;; Highlight active buffer
                 ,@(when (zerop position)
                     '('face 'mode-line-buffer-id))
                 'mouse-face 'mode-line-highlight
                 'help-echo "mouse-1: Switch to buffer"
                 'local-map (let ((map (make-sparse-keymap)))
                              (define-key map
                                [mode-line mouse-1]
                                `(lambda ()
                                   (interactive)
                                   (switch-to-buffer ,buf)))
                              map)))))
         t)
        (setq result (cons `(,sym :priority ,priority ,@props)
                           result))))
    (reverse result)))

(spaceline-define-segment vtermux-projectile
  "Display project name with projectile menu"
  (when (and (boundp projectile-project-root)
             (projectile-project-root))
    (propertize (projectile-project-name)
                'local-map (let ((map (make-sparse-keymap)))
                             (define-key map [mode-line down-mouse-1]
                               projectile-mode-menu)
                             map)
                'mouse-face 'mode-line-highlight)))

;;;;;;;;;;;;;;;;;;;;
;; Hook Functions ;;
;;;;;;;;;;;;;;;;;;;;

(defun vtermux-spaceline--set (&rest _)
  "Hook function to manage mode-line for vtermux buffers"
  (if (and vtermux-mode (functionp 'spaceline-ml-vtermux))
      (setq mode-line-format '("%e" (:eval (spaceline-ml-vtermux))))
    (kill-local-variable 'mode-line-format)))

;;;;;;;;;;;;;;;;;;;;;;
;; Public Functions ;;
;;;;;;;;;;;;;;;;;;;;;;

;;;###autoload
(defun vtermux-spaceline-compile (&rest additional-segments)
  "Compile the vtermux spaceline."
  (spaceline-compile
    'vtermux
    `(((((persp-name :fallback workspace-number) window-number)
        :separator "•")
       :face highlight-face
       :priority 100)
      (anzu :priority 95)
      (process :when active)
      ((flycheck-error flycheck-warning flycheck-info)
       :when active
       :priority 89)
      ("copy"
       :face highlight-face
       :when vterm-copy-mode)
      ,@(vtermux-spaceline-buffer-indicator
         vtermux-spaceline-n-buffer-indicators
         99 4))
    `((version-control :when active
                       :priority 78)
      (vtermux-projectile)
      which-function
      (python-pyvenv :fallback python-pyenv)
      (purpose :priority 94)
      (battery :when active)
      (selection-info :priority 95)
      input-method
      ((point-position line-column)
       :separator " • "
       :when vterm-copy-mode
       :priority 96)
      (global :when active)
      ,@additional-segments
      (buffer-position :when vterm-copy-mode
                       :priority 99)
      (hud :priority 99))))

;;;###autoload
(defun vtermux-spaceline-enable (&rest additional-segments)
  "Enable vtermux spaceline for vtermux-mode and set it for all current vtermux
buffers."
  (apply 'vtermux-spaceline-compile additional-segments)
  (add-hook 'vtermux-mode-hook #'vtermux-spaceline--set)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when vtermux-mode
        (vtermux-spaceline--set)))))

(defun vtermux-spaceline-disable ()
  "Disable vtermux spaceline and unset it from all current vtermux buffers."
  (remove-hook 'vtermux-mode-hook #'vtermux-spaceline--set)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when vtermux-mode
        (kill-local-variable 'mode-line-format)))))

(provide 'vtermux-spaceline)

;;; vtermux-spaceline.el ends here
